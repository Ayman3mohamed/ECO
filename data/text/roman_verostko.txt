This paper explores issues related to software that I have developed for personal use in my studio. The software, called Hodos, can generate paintings which bear an uncanny resemblance to work I did before becoming involved with computers.

First I will outline the features of the art concept which occupied the mature phases of my own work long before my involvement with electronics. Then we will focus on the essential features of the "artistic decision" procedures used in expressing the art concept.

Next we will review some of the salient features of the software which embodies these art form ideas. A review of several works generated by the software will show that they reflect essential characteristics of the earlier paintings.

Finally we will see that this view provides important considerations for the future of art:

First, this kind of software is a medium of a different "order" than any historical medium. Because such software embodies the procedures for artistic improvisation it can be used for innovative variation on the artist's theme without the artist being present. Although each work may be "one of a kind" it does belong to a family. We must ask whether, to what extent, and how the artist's hand is present in the work or in a family of works. What can we say of the apparent feeling in the brush strokes?

Second, perhaps a more important consideration, is the 'quantum leap' in procedure or process. This new artistic process, while hardly the same, is remarkably analogous to the biological process of epigenesis. The software, Hodos, may be viewed as a genotype (gene) since it is the code for "how to make the work". The software can make a "family" of works - with each work being unique (one of a kind, yet familial). The potential for crossing families of different artists opens new domains which includes the hybridization of form and, eventually, a genealogy of form.

These considerations open the door to a series of interesting questions on authorship, originality, the role of the individual and the art-making process.

The Dance Between Order and Chaos. In making these works the first phase was to delineate carefully one or several rectangular fields with variable spacing creating visual movement relative to the overall field. These rectangles were carefully filled with a heavy synthetic impasto making a slightly raised rectangular relief on the panel.

Next, in very intense sessions, I would mark the surface with spontaneous gestures, sometimes with brushes , sometimes with crayons or pencils. The gestural marks were imbedded in layers of colored stains that drew out the grain of the wood.

The gestural aspects of the work represented that aspect of human experience that might come from "uncontrol" - such as a feeling or an impulse. The dominant rule was that the marks had to be entirely spontaneous without any conscious editing. For several years I had worked through hundreds of gestural works in an effort to make irrational marks.

Through this process, in a kind of spiritual quest - one has to empty the self of "thinking", be entirely present to the moment, and strive to be one with one's world. To be one with the brush, the crayon, the panel, the universe - in a free flowing gesture was indeed the goal. Being most "free" was also being most "joined". A gesture free of rigid aesthetic conceptions harmonizes easily with natural forces. This can be seen in the splash of paint that yields to unseen forces like gravity. It reveals the forces to which it yields and to which it is joined. Can this be achieved with software?

In the final stages of the work the rectangular areas were painted according to another set of rules - but never absolutely so. Each rectangle was painted with a value and a color that gave it a visual push or pull slightly forward or slightly receding from the predominant picture plane. Simultaneously the placement was intended to lend precarious but effective balance between all the lateral inclinations. The push or pull, advancing or receding, and the lateral movements, were a visual means of keeping a tension (opposition) between the rectangles and yet maintaining an equilibrium in the overall painting.

Meanings and Interpretations. The present works represent apparent polarities of human experience - the rational and the irrational, body and spirit, life and death, heaven and earth. Both in the paintings and in human experience we find that radical polarity generally implies its opposite - dark implies light or conversely light implies dark.

The works, as a visual dialectic between control and uncontrol, embody an idea about how to make art. They also represent the spiritual struggle of life itself. One learns that peace and unity lie in the balance between reason and feeling - between all those interior forces that push and pull us in opposite directions. They seem related to traditional oriental wisdom rooted and  imaged in the yin/yang, woman/man, moon/sun, soft/hard, earth/heaven.
In order to translate an art concept into software one must first describe the specific art making procedures. This is achieved by thinking through each step. For example if the procedure begins with drawing a line then the basis for all the line drawing procedures must be identified. This includes the basis for the starting point, the color decisions, the quality and character of the line, and its changing angles, flow, and length. Once these procedures and relationships are understood they can be translated into software. The software code is a formal system equivalent to the art concept, an isomorphism in a computer language.

A similar isomorphism lies at the heart of D. Hofstadter's book Godel, Escher, Bach: An Eternal Golden Braid. In discussing how one can view a formal system both typographically and arithmetically, he notes that

"typographical rules for manipulating numerals are actually arithmetic rules for operating on numbers.

This simple observation is the heart of Godel's method, and it will have an absolutely shattering effect . It tells us that once we have a Godel-numbering for any formal system, we can straight-away form a set of arithmetical rules which complete the Godel isomorphism. The upshot is that we can transfer the study of any formal system - in fact the study of all formal systems - into number theory".

To reiterate, if we can describe the procedures for expressing our "art concept" then we can code those procedures and work with them arithmetically. Suppose then that we are able to describe an "art concept" rather comprehensively. The description of an art concept is essentially an outline of the decision system that governs the art-making procedures. We outline why, how, and where we prefer to draw lines or paint areas. We outline the basis for how we scale relationships, choose colors and space the pictorial elements within the work. We identify the conditions of acceptable and unacceptable combinations of shape, scale, form and color. When these steps have been done in a thoroughly systematic way, we have described a formal system that can then be coded.

While Hodos embodies the essential art concepts with which I work the process is still rather primitive. There are tested routines planned for the existing program and more to be developed. The process never ends. One reaches a plateau which provides the viewpoint from which one sets up operations to attain the next plateau. Through this dialectic the original art concept undergoes transformation and the software evolves to the next stage.

Let us consider how this works specifically for the most obvious "control" elements, the rectangular shapes. In the wood panels I created in the 1960's the rectangular shapes do not overlap, they are never closer or further apart than certain distances relative to the over-all space. They are painted with opposing hues but with intensities and values (shades) just close enough to neutral to keep the balance precarious. Further analysis would show other subtle relations as part of the overall formal system. All of this can be coded so that once the first move is made the procedure grows a set of rectangular shapes based on the artist's rules.

The automated procedures for identifying areas use both control (by fixing parameters) and uncontrol (by selecting randomly within the parameters). For example, a 'starting point' routine may need several pieces of controller information such as preferred and forbidden starting areas. If one thinks of the pseudo-randomizing routine as 'tossing dice' , then the procedure in plain English might read as follows: "Find a valid starting point by tossing dice weighted for not more than a 25% deviation from the center of a preferred region.

The artist, in the refining process, usually reviews scores of possibilities before making a software decision. By observation the artist learns to adjust the routine and the data to achieve the desired formal effects. After some experience the artist might see how he can modify the algorithm to introduce variable scaling relationships that were not evident in earlier work. This feedback process provides a way for both refinement and growth.

We can do the same with every element that the "art concept" requires for building the work. For example, a scribble routine is coded to rotate randomly within certain parameters. The rotation parameters have been determined by experience with what has worked and what hasn't. Still the variables are changeable and are revised from time to time. Sometimes the slightest change of a routine opens up new vistas. The "uncontrol" elements that course through the program may be better understood if we outline their sources and how they entered the work.

Uncontrol: Sources and Evolution

In the initial phases of my computer work I sought to write a simple program just to sample the computer as a medium, that is, just to get the computing process to generate the work. The simplest way would be to mime automatic art. Step one was to make a scribble loop that would unveil the inner workings of the computer, similar to the way a Paul Klee doodle revealed the inner life of Paul Klee. That venture was not very successful but it yielded insight into computerized automatic processes. Such work is related to a genre of artistic activity which began early in this century.

Automatic art, tachism, and abstract expressionism are terms loosely associated with the idea that one can express something of one's psychic life which lies under, above or beyond conscious life by working in a dream-like or trance-like state. Such drawing, similar to doodling in an absent minded state, was practiced by the surrealists in the 1920's and even earlier by some of the dadaists.

Both spontaneous gestural drawing and the dadaist non-sensical juxtaposition of words employ techniques which step outside of rational procedure. Non-sense sounds, like non-sense drawing were used in the "dada" soirees to shock those who felt complacent with the power of reason. Some felt that, if it was reasonable to kill and be killed in the trenches, then perhaps "non-sense" should reign rather than reason. After all, some concluded, only political "reasoning" made "sense" out of the war.

Out of that artistic milieu came artists who learned to enter the frontiers of their inner world; through dreams and free associations both artists and poets opened a new artistic frontier. My first computer efforts were simple routines to get the computer to mime some of the artistic forays that took place early in this century.

My first exhibition piece, "The Magic Hand of Chance", was exhibited on a 25 inch monitor cabled to a personal computer. The program worked in real time generating a series of six visual improvisations which were displayed in dynamic sequence on the monitor. All words and images were generated in real time and each sequence was always an original improvisation. These works with their non-repetitive improvisations, evoked the kinds of surprises that we get from free association.

The routines included The Sayings of Omphalos, the Greek word omphalos (navel) being the name of the computer I used at that time. The title alludes to the sayings of Mao Ze-Dong. They have the form of Wisdom Literature but are actually playful nonsense pieces. An occasional juxtaposition of terms may shock us, as in free association, altering our viewpoint.

The program also has self titling routines which generate original improvisational titles for each sequence. Some examples: "Instantly Frayed Whimsy"; "Lunkhead Thrills Iceman"; "Your Joyous Alarm"; "Bad Egg Brews.

The most nonsensical of these routines is Jabberwock, which is part of a larger program that was later abandoned. The program titles a subject of discourse and then proceeds to write a paper. Here is some Jabberwock written on September 1, 1988. Jabberwock titled its subject Enkaom Suxe Ilib. The first paragraph reads: "Schusca umopoh. Efet enkaom ku cuile oteoj yucou pnuibi suxe cu suxe. Ku ilib eey okoy oteoj uiyaurd autifib sciefio ilmedth. Qithi soraihio bu ghiahu sorio suxe. Sonua oray ultap enkaom ruweko suxe ku unuedum eg. Suxe ghiahu oden proveo ioyus ulmeuk".

Jabberwock and the Magic Hand of Chance provided the kind of logic from which the painting program grew. Eventually I became interested in "hard copy" and began to write software for building pictorial elements with lines and brush-strokes.

An outside observer, without knowing the techniques employed, might view them as a natural evolution in the hand of the artist. The automated techniques are so transparent that the viewer sees the artist's hand in individual lines and paint strokes. But the artist's algorithms work in lieu of the artist and the plotter's arm works in lieu of the artist's hand. This frees the artist to concentrate creative energy on the next level of the dialectic.

Some of the most recent works are built with simple brush strokes derived from a range of about 8 to 16 control points. Several of these works, titled Woo Way have some resemblance to Chinese traditional calligraphy. Figure 8 shows a classic example of cao shu 'grass writing' by Zhang Xu of the Tang period, The text reads yan cia 'under the cliff'. Such calligraphy , still taught and practiced in today's academies, was practiced by the literati.

The Hodos brush strokes represent an effort to achieve the fresh qualities of spontaneity and sureness of stroke. Woo Way is word-play, an allusion to the Chinese traditional wisdom of Wu Wei which literally means "do nothing" and suggests letting nature take its course. It implies that one should not interfere with the natural course but rather flow with the way. The computer gestures do not show the characters for Wu Wei, but perhaps the process is a form of Wu Wei.
Thus far we have been discussing how an "art concept" can be coded when its formal system can be described. However, software in itself is something like a musical score. While all the musical ideas may be embodied in the score we still can't experience the music unless it is played on an instrument. The computer can be cabled to many different kinds of peripherals such as a printer, a plotter, a synthesizer, and a telephone.

Usually I review how the code is working through crude simulations on a monitor. But the pixels on the monitor have only a token relationship to paintings. While many artists get hard copy by photographing the monitor I prefer to work with a plotter. A plotter is a drawing machine which can execute drawing instructions sent to it by a computer. Such machines are commonly used for architectural and engineering drawing.

Hodos is written to drive a pen plotter which has 14 pen stalls arranged in two banks with 7 pens in each bank. Permanent inks are mixed for refillable pen cartridges and arranged on the plotter in a classical palette going from warm to cool colors. The program follows rules about where to look for the pens but the defaults can be altered by the artist at start up.

Work is executed on rag papers with a moderate tooth. A standard single frame size is 21.5 inches by 32 inches on a 24 by 36 inch paper. Two frames lengthwise easily achieves a six foot work.

The Brushes. I felt somewhat foolish introducing this routine. I had spent long hours developing a routine to make the drawing machine paint with a brush. It seemed clumsy and almost pointless at first. But through trial and error with the brush mounts, the software, the inks, and the paper, a vast untapped potential emerged. Figure 7 shows the first use of the paint-brush routine in a finished work.

With the software driven stroke there is a sureness and directness that is almost exhilarating. The software knows for sure where beginnings and endings are - precisely. It remembers the stroke and can improvise with the same stroke in a scalar fashion, and do so without failure. This latter ability, which I have only begun to explore, promises to be a rich ground for development.

Hodos introduces art-making procedures of a different order than traditional procedures. The closest analogy might be the score for a musical composition. Both the musical score and software art provide instructions for the creation of an artistic form. The traditional musical score, however, however, requires skilled players and provides the rules for playing only the same piece each time. Hodos requires no skilled players and can improvise an original work every time.

A process which can improvise on an artist's own form ideas without the artist being present extends the power of the original art concept. For example, a colleague from a university some thousand miles away suggested sending my software as a "visiting artist" next semester.

What are the implications? Traditional technologies require that the artist must direct even the simplest improvisation on a print or photograph. The change in exposure, color or light must either be made or directed by the artist. In software art some of the artist's sensibilities about how to make improvisations are coded. This code extends the artist's ability to improvise or preview improvisational possibilities without appparent limits. Such power of improvisation provides the artist with an awesome leverage for exploring form-making ideas.

The process for making art with a "personal expert system" has a strong resemblance to the biological process of epigenesis. The epigenesis of organisms is the process whereby a mature life form grows from its seed. In this analogy the software may be viewed as genotype or the seed that contains all the information necessary for growing the mature form. A brief review of the biological terms may help clarify this analogy.

In genetics the term "epigenesis" is used to describe the process whereby the "phenotype" (a physical organism) grows (unfolds) from a genotype (DNA). The analogous procedure for the paintings suggests that: Hodos, the software, may be viewed as "genotype", the painting as "phenotype", and the process as epigenesis. Software art has adequate information about "how to grow the painting" through a series of recursive graphic routines; each unfolded offspring is a variant of its predecessor. The analogy stops here as these "offspring" cannot beget the next generation. However, they do point the way for the artist in designing the next generation of software. (Note: Since the original draft of this paper the genetic algorithm has been used by Karl Simms and other artists to grow generations of form)

In summary, a new order of art making systems has been emerging. In the present stage the feed-back from the program helps the artist develop the next stage of software. The evolving program helps create itself. This is no different from using a compiler to design a better compiler. There are plateaus of sophistication. The evolving software is the new art and it can be viewed as analogous to genetic code, genotype.

The software also has the potential for hybridization. Let us assume that we could code an art idea of Wassily Kandinsky and a musical idea by M. P. Mussorgsky. We might then build a hybrid "Kandinsky-Mussorgsky" code. One could add audio and visual drivers for all or part of the code, as desired. Eventually one could pair this art concept with another. Each frontier opens a new frontier.

Within the next decade or so advances in high-level software will make it possible for more artists to easily build their own personal expert systems. Families of improvisational works will grow by generations. Familial form traits, like gene characteristics, will reside in the high level expert systems that artists use to make their own expert systems. Some inherited familial features will pop up in some works and not in others as artists learn how to get their own form preferences to prevail.

In a very uncanny way software appears to have a life of its own. The artist's role is to humanize it - give it the form and structure to serve the quality of our art and of our life.

What is an algorithm?  An algorithm or algorism may be viewed simply as a detailed recipe for carrying out a task. The term has its origin in mathematics as the step by step procedure for solving a problem. The  commonplace procedures we use for multiplying and dividing numbers are algorithms. With precise details for each step the procedures yield the same result whether executed by a computer or by a human. This is why robots are able to handle many tasks that were once done only by humans.

Many view an "algorithmic procedure" as a strictly mathematical operation. Today we are inclined to view any well defined procedure as an algorithm. A recipe for baking bread is an algorithm. Follow the recipe faithfully and you will duplicate the kind of bread made by the person who wrote the recipe.

Machines can also be programmed to follow recipes. The programmed circuitry in  bread-making machine directs the machine's mechanism on precisely how to mix ingredients, knead the dough,  and bake the bread.  In theory it should succeed every time but there are also factors of  mechanical and human error. The quality and measure of ingredients may contribute to unwanted results.

Within the past quarter century operational instructions have been imbedded in the design of many industrial and household  utilities.  They implement our daily use of  telephones, automobiles, cameras, TV's, and radios. Our hospitals, factories, banks, and shopping centers all depend on the algorithms that control inventories, transactions, communications and security.  They are ubiquitous and our mass culture would collapse without them.

Algorithmic procedures are also imbedded in  the digital tools used in the arts. Use of these tools influences form in  the practice of film, architecture, photography, music, printmaking, and all types of electronic sound and image. The drudgery of executing algorithms that would require immense time, or even be impossible to execute without computing power, has been  handed over to the machine leaving humans more free to focus on the creative part of their work. For the artist this means improving and improvising the art-making  procedure.  For the algorist, work on the algorithm is work on the procedure.

Clearly early civilizations developed procedures for counting and measuring. They also created procedures for weaving, grinding, making fire and cooking. Any of these procedures, when well defined, could be viewed as an algorithm. Indeed  weaving technology played an important role in the history of computers.  If we can spell out the procedure for any given task then, given all the necessary materials and skills, we should be able to carry out the task.

Architectural plans, musical scores and dance notations bear one feature in common - they are all recipes for carrying out a task. From this perspective a broad range of  notational systems can be viewed and studied as algorithmic procedure.  From this perspective algorithmic procedures for generating artistic forms enjoy a rich and varied tradition  even though we have used other terms to describe them.

In Art History.  A history of algorithms in the visual arts would be voluminous touching many phases in every culture at every turn - the Egyptian canons for drawing the human figure,  the infinite geometric play in Islamic art and the role of both linear perspective and proportion in Renaissance art.   In China we would find the Mustard Seed Manual and in Byzantium the conventions for icon painting.  In Europe, by the  Seventeenth Century we would find extremely sophisticated algorithms for plotting the dizzying perspectives  imaging the passage from earth to heaven.

Even so, notational systems for the visual arts played a limited role when compared to notational systems for music.  A gifted composer could compose  a score for a profoundly moving musical passage that could be played hundreds of years later by a skilled virtuoso. Not so for the painter. While Leonardo could easily employ an algorithm for creating the perspective space in the Last Supper, he could not, at that time, compose an algorithm for rendering the face of Judas.

As computers became more accessible to artists in the 1970's and 1980's some artists began to experiment with algorithmic procedure.  The new technology offered them methods of working algorithmically that were unavailable before the advent of computers. By  the 1980's a number of us were working with the pen plotter,  a machine with a "drawing arm".  Seeing other's work at various venues we came to know each other and share ideas.  Algorists like Harold Cohen, Manfred Mohr, Jean Pierre Hebert and this author had achieved mature work but we had no common identity.  Each in their own way had invented algorithmic procedures for generating their art. By doing so each created their own distinctive style.  Clearly style and algorithm were linked in a very important way.

One of the concerns for educators in  the early 1980's was whether we should be teaching programming in our art schools or rather wait for advances in computing power, software programs, and printing technologies.  With the growth of PC computing power, refinement of raster printing technologies, and  professional software for the visual artists more and more artists took up what was generally called "computer art". The unique features and form-generating capabilities for algorithmic procedure in the hands of the artist was easily lost in the widening world of "computer art".  It was in this milieu that a small group of artists, including this author, introduced panels for addressing the role of "algorithms & the artist". Following one such panel at the 1995 SIGGRAPH conference it was Jean Pierre Hebert, Ken Musgrave and myself who agreed to work towards a common identity for those who practiced algorithmic art.

Within a short time we introduced our identity as "algorists" and Jean Pierre Hebert wrote an algorithm defining an "algorist" as applied to artists. Within a decade this usage led us to a better understanding of the role of algorithmic procedure in shaping world culture at the turn of the Century.

For the past 40 years I have worked with pure visual form ranging from controlled constructions with highly studied color behavior to spontaneous brush strokes and inventive non-representational drawing. Such art has been labeled variously as "concrete", "abstract", "non-objective", and "non-representational". In its purest form such art does not re-presentother reality. Rather "it is" the reality. One contemplates a pure form similar to the way one might contemplate a fine vase or a sea shell.  Early 20th Century pioneers of this art include artists like Piet Mondrian, Frantisek Kupka and the brothers Naum Gabo and Antoine Pevsner.

In the last quarter of the 20th Century a radically new form-generating procedure became available. By joining algorithmic procedure and computing power some artists began generating forms with surprising visual qualities.  A vast uncharted frontier of form waited to be conceptualized  and concretized. By the 1980's I was composing detailed procedures for generating forms that were accessible only through extensive computing. On-going work concentrates on developing this program of form generators.  By joining these procedures with fine arts practice I create two dimensional art objects to be contemplated much as we contemplate the  forms of nature .

Form generation as epigenesis. The greater part of this creative work in the past 15 years has been developing art form generators.  These are original detailed procedures, for initiating and improvising form ideas. Such form generators may be likened to biological genotypes since they contain the code for generating forms. The procedure for executing the code, somewhat analogous to biological epigenesis, grows the form. The creation and control of these instructions provides an awesome means for an artist to employ form-growing concepts as an integral part of the creative process. Such routines provide access to countless visual structures that constitute a new frontier of visual forms for the artist.

The Work. Works are executed with a multi-pen plotter coupled to a PC driven by the software. The plotter, choosing from an array of pens loaded with pigmented inks draws each individual line. Most works require thousands of lines with  software controlled pen changes. An optional brush routine allows  occasional substitution of a brush for a pen. Brush strokes are plotted using Chinese brushes adapted to the machine's drawing arm. The Diamond Lake Apocalypse series of illuminated digital scripts is reminiscent of medieval manuscripts. Many of these works are enhanced with a touch of gold or silver leaf applied by hand. However, the design elements illuminated with gold are always code generated and machine plotted.
